// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module FFT_FFT_stage_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_IN_M_real_address0,
        data_IN_M_real_ce0,
        data_IN_M_real_q0,
        data_IN_M_real_address1,
        data_IN_M_real_ce1,
        data_IN_M_real_q1,
        data_IN_M_imag_address0,
        data_IN_M_imag_ce0,
        data_IN_M_imag_q0,
        data_IN_M_imag_address1,
        data_IN_M_imag_ce1,
        data_IN_M_imag_q1,
        data_OUT_M_real_address0,
        data_OUT_M_real_ce0,
        data_OUT_M_real_we0,
        data_OUT_M_real_d0,
        data_OUT_M_real_address1,
        data_OUT_M_real_ce1,
        data_OUT_M_real_we1,
        data_OUT_M_real_d1,
        data_OUT_M_imag_address0,
        data_OUT_M_imag_ce0,
        data_OUT_M_imag_we0,
        data_OUT_M_imag_d0,
        data_OUT_M_imag_address1,
        data_OUT_M_imag_ce1,
        data_OUT_M_imag_we1,
        data_OUT_M_imag_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] data_IN_M_real_address0;
output   data_IN_M_real_ce0;
input  [15:0] data_IN_M_real_q0;
output  [4:0] data_IN_M_real_address1;
output   data_IN_M_real_ce1;
input  [15:0] data_IN_M_real_q1;
output  [4:0] data_IN_M_imag_address0;
output   data_IN_M_imag_ce0;
input  [15:0] data_IN_M_imag_q0;
output  [4:0] data_IN_M_imag_address1;
output   data_IN_M_imag_ce1;
input  [15:0] data_IN_M_imag_q1;
output  [4:0] data_OUT_M_real_address0;
output   data_OUT_M_real_ce0;
output   data_OUT_M_real_we0;
output  [15:0] data_OUT_M_real_d0;
output  [4:0] data_OUT_M_real_address1;
output   data_OUT_M_real_ce1;
output   data_OUT_M_real_we1;
output  [15:0] data_OUT_M_real_d1;
output  [4:0] data_OUT_M_imag_address0;
output   data_OUT_M_imag_ce0;
output   data_OUT_M_imag_we0;
output  [15:0] data_OUT_M_imag_d0;
output  [4:0] data_OUT_M_imag_address1;
output   data_OUT_M_imag_ce1;
output   data_OUT_M_imag_we1;
output  [15:0] data_OUT_M_imag_d1;

reg ap_idle;
reg data_IN_M_real_ce0;
reg data_IN_M_real_ce1;
reg data_IN_M_imag_ce0;
reg data_IN_M_imag_ce1;
reg data_OUT_M_real_ce0;
reg data_OUT_M_real_we0;
reg data_OUT_M_real_ce1;
reg data_OUT_M_real_we1;
reg data_OUT_M_imag_ce0;
reg data_OUT_M_imag_we0;
reg data_OUT_M_imag_ce1;
reg data_OUT_M_imag_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln22_fu_190_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] trunc_ln25_fu_236_p1;
reg   [0:0] trunc_ln25_reg_427;
wire   [4:0] add_ln_fu_244_p3;
reg   [4:0] add_ln_reg_435;
wire   [63:0] zext_ln27_fu_258_p1;
reg   [63:0] zext_ln27_reg_440;
reg   [63:0] zext_ln27_reg_440_pp0_iter1_reg;
wire   [63:0] zext_ln26_fu_285_p1;
reg   [63:0] zext_ln26_reg_456;
reg   [15:0] trunc_ln2_reg_472;
reg   [15:0] trunc_ln389_4_reg_478;
wire    ap_block_pp0_stage0;
reg   [1:0] j_fu_60;
wire   [1:0] add_ln23_fu_264_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_j_load;
reg   [3:0] block_num_fu_64;
wire   [3:0] select_ln22_3_fu_228_p3;
reg   [3:0] ap_sig_allocacmp_block_num_load;
reg   [4:0] indvar_flatten_fu_68;
wire   [4:0] add_ln22_fu_196_p2;
reg   [4:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln23_fu_208_p2;
wire   [3:0] add_ln22_3_fu_222_p2;
wire   [1:0] select_ln22_fu_214_p3;
wire   [2:0] trunc_ln26_fu_240_p1;
wire   [4:0] add_ln27_fu_252_p2;
wire   [23:0] shl_ln_fu_290_p3;
wire   [23:0] shl_ln389_1_fu_305_p3;
wire   [23:0] sub_ln389_1_fu_313_p2;
wire   [23:0] select_ln389_fu_298_p3;
wire   [23:0] select_ln389_1_fu_319_p3;
wire   [23:0] sub_ln389_fu_326_p2;
wire   [23:0] sub_ln389_2_fu_349_p2;
wire   [23:0] select_ln389_2_fu_342_p3;
wire   [23:0] select_ln389_3_fu_355_p3;
wire   [23:0] add_ln389_fu_362_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 j_fu_60 = 2'd0;
#0 block_num_fu_64 = 4'd0;
#0 indvar_flatten_fu_68 = 5'd0;
#0 ap_done_reg = 1'b0;
end

FFT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln22_fu_190_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            block_num_fu_64 <= select_ln22_3_fu_228_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            block_num_fu_64 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln22_fu_190_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_68 <= add_ln22_fu_196_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_68 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln22_fu_190_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_60 <= add_ln23_fu_264_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_60 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln_reg_435 <= add_ln_fu_244_p3;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        trunc_ln25_reg_427 <= trunc_ln25_fu_236_p1;
        trunc_ln2_reg_472 <= {{sub_ln389_fu_326_p2[23:8]}};
        trunc_ln389_4_reg_478 <= {{add_ln389_fu_362_p2[23:8]}};
        zext_ln26_reg_456[4 : 0] <= zext_ln26_fu_285_p1[4 : 0];
        zext_ln27_reg_440[4 : 0] <= zext_ln27_fu_258_p1[4 : 0];
        zext_ln27_reg_440_pp0_iter1_reg[4 : 0] <= zext_ln27_reg_440[4 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_190_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_block_num_load = 4'd0;
    end else begin
        ap_sig_allocacmp_block_num_load = block_num_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 2'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_IN_M_imag_ce0 = 1'b1;
    end else begin
        data_IN_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_IN_M_imag_ce1 = 1'b1;
    end else begin
        data_IN_M_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_IN_M_real_ce0 = 1'b1;
    end else begin
        data_IN_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_IN_M_real_ce1 = 1'b1;
    end else begin
        data_IN_M_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_OUT_M_imag_ce0 = 1'b1;
    end else begin
        data_OUT_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_OUT_M_imag_ce1 = 1'b1;
    end else begin
        data_OUT_M_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_OUT_M_imag_we0 = 1'b1;
    end else begin
        data_OUT_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_OUT_M_imag_we1 = 1'b1;
    end else begin
        data_OUT_M_imag_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_OUT_M_real_ce0 = 1'b1;
    end else begin
        data_OUT_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_OUT_M_real_ce1 = 1'b1;
    end else begin
        data_OUT_M_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_OUT_M_real_we0 = 1'b1;
    end else begin
        data_OUT_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        data_OUT_M_real_we1 = 1'b1;
    end else begin
        data_OUT_M_real_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_3_fu_222_p2 = (ap_sig_allocacmp_block_num_load + 4'd1);

assign add_ln22_fu_196_p2 = (ap_sig_allocacmp_indvar_flatten_load + 5'd1);

assign add_ln23_fu_264_p2 = (select_ln22_fu_214_p3 + 2'd1);

assign add_ln27_fu_252_p2 = (add_ln_fu_244_p3 + 5'd2);

assign add_ln389_fu_362_p2 = (select_ln389_2_fu_342_p3 + select_ln389_3_fu_355_p3);

assign add_ln_fu_244_p3 = {{trunc_ln26_fu_240_p1}, {select_ln22_fu_214_p3}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign data_IN_M_imag_address0 = zext_ln26_fu_285_p1;

assign data_IN_M_imag_address1 = zext_ln27_fu_258_p1;

assign data_IN_M_real_address0 = zext_ln26_fu_285_p1;

assign data_IN_M_real_address1 = zext_ln27_fu_258_p1;

assign data_OUT_M_imag_address0 = zext_ln27_reg_440_pp0_iter1_reg;

assign data_OUT_M_imag_address1 = zext_ln26_reg_456;

assign data_OUT_M_imag_d0 = (data_IN_M_imag_q0 - trunc_ln389_4_reg_478);

assign data_OUT_M_imag_d1 = (data_IN_M_imag_q0 + trunc_ln389_4_reg_478);

assign data_OUT_M_real_address0 = zext_ln27_reg_440_pp0_iter1_reg;

assign data_OUT_M_real_address1 = zext_ln26_reg_456;

assign data_OUT_M_real_d0 = (data_IN_M_real_q0 - trunc_ln2_reg_472);

assign data_OUT_M_real_d1 = (data_IN_M_real_q0 + trunc_ln2_reg_472);

assign icmp_ln22_fu_190_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_208_p2 = ((ap_sig_allocacmp_j_load == 2'd2) ? 1'b1 : 1'b0);

assign select_ln22_3_fu_228_p3 = ((icmp_ln23_fu_208_p2[0:0] == 1'b1) ? add_ln22_3_fu_222_p2 : ap_sig_allocacmp_block_num_load);

assign select_ln22_fu_214_p3 = ((icmp_ln23_fu_208_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_j_load);

assign select_ln389_1_fu_319_p3 = ((trunc_ln25_reg_427[0:0] == 1'b1) ? sub_ln389_1_fu_313_p2 : 24'd0);

assign select_ln389_2_fu_342_p3 = ((trunc_ln25_reg_427[0:0] == 1'b1) ? 24'd0 : shl_ln389_1_fu_305_p3);

assign select_ln389_3_fu_355_p3 = ((trunc_ln25_reg_427[0:0] == 1'b1) ? sub_ln389_2_fu_349_p2 : 24'd0);

assign select_ln389_fu_298_p3 = ((trunc_ln25_reg_427[0:0] == 1'b1) ? 24'd0 : shl_ln_fu_290_p3);

assign shl_ln389_1_fu_305_p3 = {{data_IN_M_imag_q1}, {8'd0}};

assign shl_ln_fu_290_p3 = {{data_IN_M_real_q1}, {8'd0}};

assign sub_ln389_1_fu_313_p2 = (24'd0 - shl_ln389_1_fu_305_p3);

assign sub_ln389_2_fu_349_p2 = (24'd0 - shl_ln_fu_290_p3);

assign sub_ln389_fu_326_p2 = (select_ln389_fu_298_p3 - select_ln389_1_fu_319_p3);

assign trunc_ln25_fu_236_p1 = select_ln22_fu_214_p3[0:0];

assign trunc_ln26_fu_240_p1 = select_ln22_3_fu_228_p3[2:0];

assign zext_ln26_fu_285_p1 = add_ln_reg_435;

assign zext_ln27_fu_258_p1 = add_ln27_fu_252_p2;

always @ (posedge ap_clk) begin
    zext_ln27_reg_440[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln27_reg_440_pp0_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_456[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //FFT_FFT_stage_1
