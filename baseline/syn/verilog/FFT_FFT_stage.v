// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module FFT_FFT_stage (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_OUT_address0,
        data_OUT_ce0,
        data_OUT_q0,
        data_OUT_address1,
        data_OUT_ce1,
        data_OUT_q1,
        data_OUT_M_real_address0,
        data_OUT_M_real_ce0,
        data_OUT_M_real_we0,
        data_OUT_M_real_d0,
        data_OUT_M_real_address1,
        data_OUT_M_real_ce1,
        data_OUT_M_real_we1,
        data_OUT_M_real_d1,
        data_OUT_M_imag_address0,
        data_OUT_M_imag_ce0,
        data_OUT_M_imag_we0,
        data_OUT_M_imag_d0,
        data_OUT_M_imag_address1,
        data_OUT_M_imag_ce1,
        data_OUT_M_imag_we1,
        data_OUT_M_imag_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] data_OUT_address0;
output   data_OUT_ce0;
input  [31:0] data_OUT_q0;
output  [4:0] data_OUT_address1;
output   data_OUT_ce1;
input  [31:0] data_OUT_q1;
output  [4:0] data_OUT_M_real_address0;
output   data_OUT_M_real_ce0;
output   data_OUT_M_real_we0;
output  [15:0] data_OUT_M_real_d0;
output  [4:0] data_OUT_M_real_address1;
output   data_OUT_M_real_ce1;
output   data_OUT_M_real_we1;
output  [15:0] data_OUT_M_real_d1;
output  [4:0] data_OUT_M_imag_address0;
output   data_OUT_M_imag_ce0;
output   data_OUT_M_imag_we0;
output  [15:0] data_OUT_M_imag_d0;
output  [4:0] data_OUT_M_imag_address1;
output   data_OUT_M_imag_ce1;
output   data_OUT_M_imag_we1;
output  [15:0] data_OUT_M_imag_d1;

reg ap_idle;
reg data_OUT_ce0;
reg data_OUT_ce1;
reg data_OUT_M_real_ce0;
reg data_OUT_M_real_we0;
reg data_OUT_M_real_ce1;
reg data_OUT_M_real_we1;
reg data_OUT_M_imag_ce0;
reg data_OUT_M_imag_we0;
reg data_OUT_M_imag_ce1;
reg data_OUT_M_imag_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln22_fu_129_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln26_fu_147_p1;
reg   [63:0] zext_ln26_reg_234;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln27_fu_158_p1;
reg   [63:0] zext_ln27_reg_245;
wire    ap_block_pp0_stage0;
reg   [4:0] block_num_fu_42;
wire   [4:0] add_ln22_fu_135_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_block_num_1;
wire   [4:0] empty_fu_141_p2;
wire   [4:0] or_ln27_fu_152_p2;
wire   [15:0] trunc_ln27_fu_182_p1;
wire   [15:0] temp1_M_real_fu_168_p1;
wire   [15:0] trunc_ln27_1_fu_186_p4;
wire   [15:0] temp1_M_imag_fu_172_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 block_num_fu_42 = 5'd0;
#0 ap_done_reg = 1'b0;
end

FFT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln22_fu_129_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            block_num_fu_42 <= add_ln22_fu_135_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            block_num_fu_42 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln26_reg_234[4 : 1] <= zext_ln26_fu_147_p1[4 : 1];
        zext_ln27_reg_245[4 : 1] <= zext_ln27_fu_158_p1[4 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_129_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_block_num_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_block_num_1 = block_num_fu_42;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT_M_imag_ce0 = 1'b1;
    end else begin
        data_OUT_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT_M_imag_ce1 = 1'b1;
    end else begin
        data_OUT_M_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT_M_imag_we0 = 1'b1;
    end else begin
        data_OUT_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT_M_imag_we1 = 1'b1;
    end else begin
        data_OUT_M_imag_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT_M_real_ce0 = 1'b1;
    end else begin
        data_OUT_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT_M_real_ce1 = 1'b1;
    end else begin
        data_OUT_M_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT_M_real_we0 = 1'b1;
    end else begin
        data_OUT_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT_M_real_we1 = 1'b1;
    end else begin
        data_OUT_M_real_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT_ce0 = 1'b1;
    end else begin
        data_OUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_OUT_ce1 = 1'b1;
    end else begin
        data_OUT_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_135_p2 = (ap_sig_allocacmp_block_num_1 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign data_OUT_M_imag_address0 = zext_ln27_reg_245;

assign data_OUT_M_imag_address1 = zext_ln26_reg_234;

assign data_OUT_M_imag_d0 = (temp1_M_imag_fu_172_p4 - trunc_ln27_1_fu_186_p4);

assign data_OUT_M_imag_d1 = (trunc_ln27_1_fu_186_p4 + temp1_M_imag_fu_172_p4);

assign data_OUT_M_real_address0 = zext_ln27_reg_245;

assign data_OUT_M_real_address1 = zext_ln26_reg_234;

assign data_OUT_M_real_d0 = (temp1_M_real_fu_168_p1 - trunc_ln27_fu_182_p1);

assign data_OUT_M_real_d1 = (trunc_ln27_fu_182_p1 + temp1_M_real_fu_168_p1);

assign data_OUT_address0 = zext_ln27_fu_158_p1;

assign data_OUT_address1 = zext_ln26_fu_147_p1;

assign empty_fu_141_p2 = ap_sig_allocacmp_block_num_1 << 5'd1;

assign icmp_ln22_fu_129_p2 = ((ap_sig_allocacmp_block_num_1 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln27_fu_152_p2 = (empty_fu_141_p2 | 5'd1);

assign temp1_M_imag_fu_172_p4 = {{data_OUT_q1[31:16]}};

assign temp1_M_real_fu_168_p1 = data_OUT_q1[15:0];

assign trunc_ln27_1_fu_186_p4 = {{data_OUT_q0[31:16]}};

assign trunc_ln27_fu_182_p1 = data_OUT_q0[15:0];

assign zext_ln26_fu_147_p1 = empty_fu_141_p2;

assign zext_ln27_fu_158_p1 = or_ln27_fu_152_p2;

always @ (posedge ap_clk) begin
    zext_ln26_reg_234[0] <= 1'b0;
    zext_ln26_reg_234[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln27_reg_245[0] <= 1'b1;
    zext_ln27_reg_245[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //FFT_FFT_stage
