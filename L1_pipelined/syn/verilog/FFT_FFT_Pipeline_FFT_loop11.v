// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module FFT_FFT_Pipeline_FFT_loop11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_address0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_ce0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_q0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_address1,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_ce1,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_q1,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_address0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_ce0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_q0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_address1,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_ce1,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_q1,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_address0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_ce0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_q0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_address1,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_ce1,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_q1,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_address0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_ce0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_q0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_address1,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_ce1,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_q1,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_address0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_ce0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_we0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_d0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_address0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_ce0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_we0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_d0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_address0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_ce0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_we0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_d0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_address0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_ce0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_we0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_d0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_address0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_ce0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_we0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_d0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_address0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_ce0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_we0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_d0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_address0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_ce0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_we0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_d0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_address0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_ce0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_we0,
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_address0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_ce0;
input  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_q0;
output  [3:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_address1;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_ce1;
input  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_q1;
output  [3:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_address0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_ce0;
input  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_q0;
output  [3:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_address1;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_ce1;
input  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_q1;
output  [3:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_address0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_ce0;
input  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_q0;
output  [3:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_address1;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_ce1;
input  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_q1;
output  [3:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_address0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_ce0;
input  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_q0;
output  [3:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_address1;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_ce1;
input  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_q1;
output  [2:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_address0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_ce0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_we0;
output  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_d0;
output  [2:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_address0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_ce0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_we0;
output  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_d0;
output  [2:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_address0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_ce0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_we0;
output  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_d0;
output  [2:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_address0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_ce0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_we0;
output  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_d0;
output  [2:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_address0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_ce0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_we0;
output  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_d0;
output  [2:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_address0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_ce0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_we0;
output  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_d0;
output  [2:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_address0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_ce0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_we0;
output  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_d0;
output  [2:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_address0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_ce0;
output   FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_we0;
output  [15:0] FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_d0;

reg ap_idle;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_ce0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_ce1;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_ce0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_ce1;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_ce0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_ce1;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_ce0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_ce1;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_ce0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_we0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_ce0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_we0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_ce0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_we0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_ce0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_we0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_ce0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_we0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_ce0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_we0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_ce0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_we0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_ce0;
reg FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln22_fu_278_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [3:0] block_num_reg_421;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln26_fu_296_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln27_fu_310_p1;
wire   [63:0] zext_ln22_fu_323_p1;
reg   [3:0] block_num_1_fu_62;
wire   [3:0] add_ln22_fu_284_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_block_num;
wire   [3:0] shl_ln26_fu_290_p2;
wire   [3:0] or_ln27_fu_304_p2;
wire   [23:0] shl_ln2_fu_362_p3;
wire   [23:0] sub_ln389_fu_370_p2;
wire   [15:0] trunc_ln3_fu_376_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 block_num_1_fu_62 = 4'd0;
#0 ap_done_reg = 1'b0;
end

FFT_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln22_fu_278_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            block_num_1_fu_62 <= add_ln22_fu_284_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            block_num_1_fu_62 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        block_num_reg_421 <= ap_sig_allocacmp_block_num;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_ce0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_ce1 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_ce0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_ce1 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_ce0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_ce1 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_ce0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_ce1 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_ce0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_we0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_ce0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_we0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_ce0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_we0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_ce0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_we0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_ce0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_we0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_ce0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_we0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_ce0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_we0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_ce0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_we0 = 1'b1;
    end else begin
        FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_278_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_block_num = 4'd0;
    end else begin
        ap_sig_allocacmp_block_num = block_num_1_fu_62;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_address0 = zext_ln27_fu_310_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_address1 = zext_ln26_fu_296_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_address0 = zext_ln27_fu_310_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_address1 = zext_ln26_fu_296_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_address0 = zext_ln27_fu_310_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_address1 = zext_ln26_fu_296_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_address0 = zext_ln27_fu_310_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_address1 = zext_ln26_fu_296_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_address0 = zext_ln22_fu_323_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_10_d0 = (FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_q1 - FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_q0);

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_address0 = zext_ln22_fu_323_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_11_d0 = (FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_q1 - FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_q0);

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_address0 = zext_ln22_fu_323_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_12_d0 = (FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_q0 + FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_q1);

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_address0 = zext_ln22_fu_323_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_13_d0 = (FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_q1 + trunc_ln3_fu_376_p4);

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_address0 = zext_ln22_fu_323_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_14_d0 = (FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_q1 - FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_7_q0);

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_address0 = zext_ln22_fu_323_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_15_d0 = (FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_q1 - trunc_ln3_fu_376_p4);

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_address0 = zext_ln22_fu_323_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_9_d0 = (FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_q1 + FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_8_q0);

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_address0 = zext_ln22_fu_323_p1;

assign FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s2_d0 = (FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_q0 + FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_q1);

assign add_ln22_fu_284_p2 = (ap_sig_allocacmp_block_num + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln22_fu_278_p2 = ((ap_sig_allocacmp_block_num == 4'd8) ? 1'b1 : 1'b0);

assign or_ln27_fu_304_p2 = (shl_ln26_fu_290_p2 | 4'd1);

assign shl_ln26_fu_290_p2 = ap_sig_allocacmp_block_num << 4'd1;

assign shl_ln2_fu_362_p3 = {{FFT_complex_ap_fixed_16_8_5_3_0_complex_ap_fixed_16_8_5_3_0_s1_6_q0}, {8'd0}};

assign sub_ln389_fu_370_p2 = (24'd0 - shl_ln2_fu_362_p3);

assign trunc_ln3_fu_376_p4 = {{sub_ln389_fu_370_p2[23:8]}};

assign zext_ln22_fu_323_p1 = block_num_reg_421;

assign zext_ln26_fu_296_p1 = shl_ln26_fu_290_p2;

assign zext_ln27_fu_310_p1 = or_ln27_fu_304_p2;

endmodule //FFT_FFT_Pipeline_FFT_loop11
